/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  CheckResult as PrismaCheckResult,
  Classification as PrismaClassification,
} from "@prisma/client";

export class CheckResultServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.CheckResultCountArgs, "select">
  ): Promise<number> {
    return this.prisma.checkResult.count(args);
  }

  async checkResults<T extends Prisma.CheckResultFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.CheckResultFindManyArgs>
  ): Promise<PrismaCheckResult[]> {
    return this.prisma.checkResult.findMany<Prisma.CheckResultFindManyArgs>(
      args
    );
  }
  async checkResult<T extends Prisma.CheckResultFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.CheckResultFindUniqueArgs>
  ): Promise<PrismaCheckResult | null> {
    return this.prisma.checkResult.findUnique(args);
  }
  async createCheckResult<T extends Prisma.CheckResultCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.CheckResultCreateArgs>
  ): Promise<PrismaCheckResult> {
    return this.prisma.checkResult.create<T>(args);
  }
  async updateCheckResult<T extends Prisma.CheckResultUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.CheckResultUpdateArgs>
  ): Promise<PrismaCheckResult> {
    return this.prisma.checkResult.update<T>(args);
  }
  async deleteCheckResult<T extends Prisma.CheckResultDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.CheckResultDeleteArgs>
  ): Promise<PrismaCheckResult> {
    return this.prisma.checkResult.delete(args);
  }

  async getClassification(
    parentId: string
  ): Promise<PrismaClassification | null> {
    return this.prisma.checkResult
      .findUnique({
        where: { id: parentId },
      })
      .classification();
  }
}
