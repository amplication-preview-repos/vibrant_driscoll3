/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CheckResult } from "./CheckResult";
import { CheckResultCountArgs } from "./CheckResultCountArgs";
import { CheckResultFindManyArgs } from "./CheckResultFindManyArgs";
import { CheckResultFindUniqueArgs } from "./CheckResultFindUniqueArgs";
import { CreateCheckResultArgs } from "./CreateCheckResultArgs";
import { UpdateCheckResultArgs } from "./UpdateCheckResultArgs";
import { DeleteCheckResultArgs } from "./DeleteCheckResultArgs";
import { Classification } from "../../classification/base/Classification";
import { CheckResultService } from "../checkResult.service";
@graphql.Resolver(() => CheckResult)
export class CheckResultResolverBase {
  constructor(protected readonly service: CheckResultService) {}

  async _checkResultsMeta(
    @graphql.Args() args: CheckResultCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [CheckResult])
  async checkResults(
    @graphql.Args() args: CheckResultFindManyArgs
  ): Promise<CheckResult[]> {
    return this.service.checkResults(args);
  }

  @graphql.Query(() => CheckResult, { nullable: true })
  async checkResult(
    @graphql.Args() args: CheckResultFindUniqueArgs
  ): Promise<CheckResult | null> {
    const result = await this.service.checkResult(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => CheckResult)
  async createCheckResult(
    @graphql.Args() args: CreateCheckResultArgs
  ): Promise<CheckResult> {
    return await this.service.createCheckResult({
      ...args,
      data: {
        ...args.data,

        classification: args.data.classification
          ? {
              connect: args.data.classification,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => CheckResult)
  async updateCheckResult(
    @graphql.Args() args: UpdateCheckResultArgs
  ): Promise<CheckResult | null> {
    try {
      return await this.service.updateCheckResult({
        ...args,
        data: {
          ...args.data,

          classification: args.data.classification
            ? {
                connect: args.data.classification,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => CheckResult)
  async deleteCheckResult(
    @graphql.Args() args: DeleteCheckResultArgs
  ): Promise<CheckResult | null> {
    try {
      return await this.service.deleteCheckResult(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Classification, {
    nullable: true,
    name: "classification",
  })
  async getClassification(
    @graphql.Parent() parent: CheckResult
  ): Promise<Classification | null> {
    const result = await this.service.getClassification(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
