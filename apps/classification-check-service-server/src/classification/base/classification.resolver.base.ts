/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Classification } from "./Classification";
import { ClassificationCountArgs } from "./ClassificationCountArgs";
import { ClassificationFindManyArgs } from "./ClassificationFindManyArgs";
import { ClassificationFindUniqueArgs } from "./ClassificationFindUniqueArgs";
import { CreateClassificationArgs } from "./CreateClassificationArgs";
import { UpdateClassificationArgs } from "./UpdateClassificationArgs";
import { DeleteClassificationArgs } from "./DeleteClassificationArgs";
import { CheckResultFindManyArgs } from "../../checkResult/base/CheckResultFindManyArgs";
import { CheckResult } from "../../checkResult/base/CheckResult";
import { ClassificationService } from "../classification.service";
@graphql.Resolver(() => Classification)
export class ClassificationResolverBase {
  constructor(protected readonly service: ClassificationService) {}

  async _classificationsMeta(
    @graphql.Args() args: ClassificationCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Classification])
  async classifications(
    @graphql.Args() args: ClassificationFindManyArgs
  ): Promise<Classification[]> {
    return this.service.classifications(args);
  }

  @graphql.Query(() => Classification, { nullable: true })
  async classification(
    @graphql.Args() args: ClassificationFindUniqueArgs
  ): Promise<Classification | null> {
    const result = await this.service.classification(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Classification)
  async createClassification(
    @graphql.Args() args: CreateClassificationArgs
  ): Promise<Classification> {
    return await this.service.createClassification({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Classification)
  async updateClassification(
    @graphql.Args() args: UpdateClassificationArgs
  ): Promise<Classification | null> {
    try {
      return await this.service.updateClassification({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Classification)
  async deleteClassification(
    @graphql.Args() args: DeleteClassificationArgs
  ): Promise<Classification | null> {
    try {
      return await this.service.deleteClassification(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [CheckResult], { name: "checkResults" })
  async findCheckResults(
    @graphql.Parent() parent: Classification,
    @graphql.Args() args: CheckResultFindManyArgs
  ): Promise<CheckResult[]> {
    const results = await this.service.findCheckResults(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
